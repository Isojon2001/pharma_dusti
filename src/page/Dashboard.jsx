import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { LayoutGrid, Users, MoreVertical } from 'lucide-react';
import SidebarItem from '../components/SidebarItem';
import '../index.css';

function Dashboard() {
  const [stats, setStats] = useState({});
  const [amiStats, setAmiStats] = useState({}); // üîç –¥–æ–±–∞–≤–ª–µ–Ω–æ
  const navigate = useNavigate();
  const [user, setUser] = useState({});
  const [searchTerm, setSearchTerm] = useState('');
  const [amiEvents, setAmiEvents] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;

  useEffect(() => {
    const socket = new WebSocket('ws://10.10.10.21:8081');

    socket.onopen = () => {
      const now = new Date();
      socket.send(JSON.stringify({
        action: 'getStats',
        month: now.getMonth() - 1, // üîç –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
        year: now.getFullYear()
      }));
    };

    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);

      // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ AMI
      if (data.action === 'stats') {
        setAmiStats(data.data);
      }

      if (data.type === 'ami-event') {
        const enriched = {
          Event: data.data?.Event || 'Unknown',
          Channel: data.data?.Channel || '',
          CallerIDNum: data.data?.CallerIDNum || '',
          Timestamp: data.data?.timestamp || new Date().toISOString(),
        };

        setAmiEvents(prev => [enriched, ...prev].slice(0, 100));
      }
    };

    return () => socket.close();
  }, []);

  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  useEffect(() => {
    const fetchStats = async () => {
      const token = localStorage.getItem("accessToken");

      if (!token) {
        console.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage");
        return;
      }

      try {
        const res = await axios.get("http://api.dustipharma.tj:1212/api/v1/app/admin/statistics", {
          headers: { Authorization: `Bearer ${token}` }
        });
        setStats(res.data.payload);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error.response?.data || error.message);
      }
    };

    fetchStats();
  }, []);

  const statItems = [
    { key: 'calls_total', label: '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤', value: stats?.calls_total },
    { key: 'calls_prev_month', label: '–ó–≤–æ–Ω–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ', value: stats?.calls_prev_month },
    { key: 'calls_current_month', label: '–ó–≤–æ–Ω–∫–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ', value: stats?.calls_current_month },
    { key: 'calls_successful', label: '–£—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏', value: stats?.calls_successful },
    { key: 'calls_failed', label: '–û—à–∏–±–æ—á–Ω—ã–µ –∑–≤–æ–Ω–∫–∏', value: stats?.calls_failed },
    { key: 'order_total', label: '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', value: stats?.order_total },
    { key: 'order_prev_month', label: '–ó–∞–∫–∞–∑—ã –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ', value: stats?.order_prev_month },
    { key: 'order_current_month', label: '–ó–∞–∫–∞–∑—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ', value: stats?.order_current_month },
    { key: 'users_total', label: '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value: stats?.users_total },
    { key: 'users_prev_month', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ', value: stats?.users_prev_month },
    { key: 'users_current_month', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ', value: stats?.users_current_month },
    { key: 'products_total', label: '–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', value: stats?.products_total },
    { key: 'products_prev_month', label: '–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ', value: stats?.products_prev_month },
    { key: 'products_current_month', label: '–ü—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ', value: stats?.products_current_month },

    // üîç –î–æ–±–∞–≤–∏–º —Å—é–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ AMI
    { key: 'ami_calls_total', label: 'AMI: –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤ (–ø—Ä–æ—à–ª—ã–π –º–µ—Å)', value: amiStats.totalCalls },
    { key: 'ami_answered', label: 'AMI: –£—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏', value: amiStats.answered },
    { key: 'ami_missed', label: 'AMI: –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏', value: amiStats.missed },
    { key: 'ami_duration', label: 'AMI: –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)', value: amiStats.totalDuration }
  ];

  const filteredItems = statItems.filter(item =>
    item.label.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedItems = filteredItems.slice(startIndex, endIndex);

  const handlePrev = () => {
    if (currentPage > 1) setCurrentPage(prev => prev - 1);
  };

  const handleNext = () => {
    if (currentPage < totalPages) setCurrentPage(prev => prev + 1);
  };

  return (
    <div className="dashboard">
      <aside className="sidebar">
        <div>
          <div className="sidebar_logo">
            <img src="./Dusti_pharma.png" width="40" height="40" alt="logo" />
            <h2>–î—É—Å—Ç–∏ —Ñ–∞—Ä–º–∞</h2>
          </div>
          <div className="sidebar-menu">
            <SidebarItem icon={LayoutGrid} label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" to="/dashboard" />
            <SidebarItem icon={() => <img src="./Icons-3.svg" alt="–†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞" />} label="–†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞" to="/RoleAndRoot" />
            <SidebarItem icon={Users} label="Partner" to="/Partner" />
            <SidebarItem icon={() => <img src="./Icons-4.svg" alt="MobileApp" />} label="–ü–∞–Ω–µ–ª—å MobileApp" to="/mobile" />
            <SidebarItem icon={() => <img src="./call.svg" width={20} height={20} alt="–ó–≤–æ–Ω–∫–∏" />} label="–ñ—É—Ä–Ω–∞–ª –∑–≤–æ–Ω–∫–æ–≤" to="/calls" />
          </div>
        </div>

        <div className="sidebar_block">
          <p>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
          <div className="sidebar_user">
            <div className="logo_flex">
              <div className="logo_user"></div>
              <div className="logo_profile">
                <h3>{user.full_name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</h3>
                <p>{'–í–∏–¥–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞' || '–§–∏–ª–∏–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
              </div>
            </div>
          </div>
        </div>
      </aside>

      <main className="statistics">
        <div className="statistics_paragraph">
          <h1>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
          <input
            placeholder="–ù–∞–π—Ç–∏"
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <div className="statistics_info">
          <div className="stat_cards">
            {paginatedItems.map((item, index) => (
              <div
                className="stat_card"
                key={index}
                onClick={() => navigate(`/statistics/${item.key}`)}
                style={{ cursor: 'pointer' }}
              >
                <div className="stat_Header">
                  {item.label}
                  <MoreVertical />
                </div>
                <p>{item.value ?? '‚Äî'}</p>
              </div>
            ))}
          </div>
          <div className="pagination_controls">
            <button onClick={handlePrev} disabled={currentPage === 1}>
              ‚óÄ –ù–∞–∑–∞–¥
            </button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}</span>
            <button onClick={handleNext} disabled={currentPage === totalPages}>
              –í–ø–µ—Ä—ë–¥ ‚ñ∂
            </button>
          </div>
        </div>
      </main>
    </div>
  );
}

export default Dashboard;
